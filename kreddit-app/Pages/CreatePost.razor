@page "/create-post"
@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

<h3>Create a new Post</h3>
            
            <div class="form-group mb-3">
                <label for="postTitle">Title</label>
                <input class="form-control" placeholder="Title" type="input" id="postTitle" @bind="postTitle"/>
            </div>
            
            <div class="form-group mb-3">
                <label for="postContent">Content</label>
                <textarea class="form-control" placeholder="Content" id="postContent" rows="4" @bind="postContent"></textarea>
            </div>
            
            <div class="form-group mb-3">
                <label for="userSelect">Post as</label>
                <select class="form-control" id="userSelect" @bind="selectedUserId">
                    <option value="0">-- Select User --</option>
                    @if (users != null)
                    {
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    }
                </select>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
            
            <div class="mt-3">
                <button class="btn btn-primary" id="createPostButton" type="button" @onclick="CreateNewPost">Create Post</button>
                <a class="btn btn-secondary ms-2" href="/">Cancel</a>
</div>

@code {
    private string? postTitle;
    private string? postContent;
    private int selectedUserId = 0;
    private User[]? users;
    private string errorMessage = "";

    @inject NavigationManager NavigationManager;

    protected override async Task OnInitializedAsync()
    {
        // Load users when component initializes
        try
        {
            users = await apiService.GetUsers();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async void CreateNewPost()
    {
        errorMessage = "";
        Console.WriteLine("Creating new post");
        
        // Validate inputs
        if (string.IsNullOrWhiteSpace(postTitle))
        {
            errorMessage = "Title is required";
            StateHasChanged();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(postContent))
        {
            errorMessage = "Content is required";
            StateHasChanged();
            return;
        }
        
        if (selectedUserId <= 0)
        {
            errorMessage = "Please select a user";
            StateHasChanged();
            return;
        }

        try
        {
            // Call the API service to create the post
            await apiService.CreatePost(postTitle, postContent, selectedUserId);
            
            // Navigate back to the home page after successful creation
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating post: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }
}
