@page "/create-post"
@using kreddit_app.Data;
@using shared.Model;
@using System.Text.RegularExpressions;
@inject ApiService apiService

<div class="mt-4 mb-4 pe-3" style="max-width: 800px;">
    <h3 class="mb-3">Create a new Post</h3>
            
    <div class="form-group mb-3">
                <label for="postTitle">Title</label>
                <input class="form-control" placeholder="Title" type="input" id="postTitle" @bind="postTitle"/>
            </div>
            
            <div class="btn-group mb-3 w-100">
                <button class="btn @(postType == "text" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetPostType("text"))">Text Post</button>
                <button class="btn @(postType == "url" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetPostType("url"))">URL Post</button>
            </div>
            
            <div class="form-group mb-3">
                <label for="postContent">@(postType == "url" ? "URL" : "Content")</label>
                @if (postType == "url")
                {
                    <input class="form-control" placeholder="Enter a single URL (e.g., google.com)" type="url" id="postContent" @bind="postContent"/>
                }
                else
                {
                    <textarea class="form-control" placeholder="Content" id="postContent" rows="4" @bind="postContent"></textarea>
                }
            </div>
            
            <div class="form-group mb-3">
                <label for="userSelect">Post as</label>
                <select class="form-control" id="userSelect" @bind="selectedUserId">
                    <option value="0">-- Select User --</option>
                    @if (users != null)
                    {
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    }
                </select>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
            
    <div class="mt-3">
        <button class="btn btn-primary" id="createPostButton" type="button" @onclick="CreateNewPost">Create Post</button>
        <a class="btn btn-secondary ms-2" href="/">Cancel</a>
    </div>
</div>

@code {
    private string? postTitle;
    private string? postContent;
    private int selectedUserId = 0;
    private User[]? users;
    private string errorMessage = "";
    private string postType = "text"; // Default to text post

    @inject NavigationManager NavigationManager;
    
    private void SetPostType(string type)
    {
        postType = type;
        postContent = ""; // Clear content when switching types
        errorMessage = "";
    }
    
    private bool IsValidUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return false;
            
        // Check for spaces which would indicate multiple URLs or invalid input
        if (url.Contains(" "))
            return false;
            
        // More lenient URL validation
        // Accepts both full URLs (https://example.com) and domain-only URLs (example.com)
        string pattern = @"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$";
        return Regex.IsMatch(url, pattern);
    }

    protected override async Task OnInitializedAsync()
    {
        // Load users when component initializes
        try
        {
            users = await apiService.GetUsers();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async void CreateNewPost()
    {
        errorMessage = "";
        Console.WriteLine("Creating new post");
        
        // Validate inputs
        if (string.IsNullOrWhiteSpace(postTitle))
        {
            errorMessage = "Title is required";
            StateHasChanged();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(postContent))
        {
            errorMessage = postType == "url" ? "URL is required" : "Content is required";
            StateHasChanged();
            return;
        }
        
        if (selectedUserId <= 0)
        {
            errorMessage = "Please select a user";
            StateHasChanged();
            return;
        }
        
        // Validate URL if URL post type is selected
        if (postType == "url")
        {
            if (postContent.Contains(" "))
            {
                errorMessage = "Please enter only one URL without spaces";
                StateHasChanged();
                return;
            }
            
            if (!IsValidUrl(postContent))
            {
                errorMessage = "Please enter a valid URL (e.g., google.com)";
                StateHasChanged();
                return;
            }
        }
        
        // Check if text post contains a URL - suggest using URL post type instead
        if (postType == "text" && IsValidUrl(postContent))
        {
            errorMessage = "Your content appears to be a URL. Please use the URL post type instead.";
            StateHasChanged();
            return;
        }

        try
        {
            // Call the API service to create the post
            await apiService.CreatePost(postTitle, postContent, selectedUserId);
            
            // Navigate back to the home page after successful creation
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating post: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }
}
