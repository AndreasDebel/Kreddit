@inherits LayoutComponentBase

@using kreddit_app.Data;
@using shared.Model;
@using System.Text.RegularExpressions;
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Posted</th>
            <th colspan="3">Votes</th>
        </tr>
        @foreach (var post in posts)
        {
            <tr>
                <!-- 
                These a href links will match the route in the page 'PostItem.razor'.
                The route is defined as "/post/{id}" and the id is the post id.
                -->
                <td><a href="/post/@post.Id">@post.Title</a></td>
                <td>
                    @if (IsUrl(post.Content))
                    {
                        <a href="@EnsureHttpPrefix(post.Content)" target="_blank" rel="noopener noreferrer">
                            @post.Content
                        </a>
                    }
                    else
                    {
                        @post.Content
                    }
                </td>
                <td>@post.CreatedAt.ToString("MMM dd")</td>
                <td>@(post.Upvotes - post.Downvotes)</td>
                <td><button @onclick="() => Upvote(post.Id)">Upvote</button></td>
                <td><button @onclick="() => Downvote(post.Id)">Downvote</button></td>
            </tr>
        }
    </table>

    <CreatePost></CreatePost>

    <br/>
}

@code {
    private Post[]? posts;
    private Post? votePost;
    @inject NavigationManager NavMan;

    protected override async Task OnInitializedAsync()
    {
        posts = await apiService.GetPosts();
    }

    private async void Upvote(int id)
    {
        var updatedPost = await apiService.UpvotePost(id);
        await RefreshPage();
    }

    private async void Downvote(int id)
    {
        var updatedPost = await apiService.DownvotePost(id);
        await RefreshPage();
        // NavMan.NavigateTo("/", true);
    }

    private async Task RefreshPage()
    {
        posts = await apiService.GetPosts();
        StateHasChanged();
    }
    
    private bool IsUrl(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return false;
            
        // Check if the text is a URL
        string pattern = @"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$";
        return Regex.IsMatch(text, pattern);
    }

    private string EnsureHttpPrefix(string url)
    {
        // Make sure the URL has http:// or https:// prefix
        if (!url.StartsWith("http://") && !url.StartsWith("https://"))
        {
            return "https://" + url;
        }
        return url;
    }
}
