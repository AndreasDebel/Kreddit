<!-- 
Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
See how the links are made in 'PostList.razor'.
-->
@page "/post/{id}"

@using kreddit_app.Data;
@using shared.Model;
@using System.Text.RegularExpressions;
@inject ApiService apiService

<PageTitle>Kreddit</PageTitle>

<style>
    div.contents {
    background-color: #f2f0eb;
    width: 600px;
    border: 2px solid #452d3d;
    padding: 10px;
    margin-top: 20px;
    }

    .back-button {
    margin-bottom: 10px;
    }
</style>

<div class="back-button">
    <a href="/" class="btn btn-secondary">Back to Home</a>
</div>

@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contents">
        <h4>@Post.Title</h4>
        <p><strong>User: @Post.User.Username, Votes: @(Post.Upvotes - Post.Downvotes)</strong></p>
        <p><small>Posted on: @Post.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small></p>
        @if (IsUrl(Post.Content))
        {
            <p>
                <a href="@EnsureHttpPrefix(Post.Content)" target="_blank" rel="noopener noreferrer">
                    @Post.Content
                </a>
            </p>
        }
        else
        {
            <p>@Post.Content</p>
        }
    </div>

    <div class="contents">
        <h4>Comments</h4>
        <table>
            <tr>
                <th>User</th>
                <th>Comment</th>
                <th colspan="3">Votes</th>
            </tr>
            @foreach (var comment in Post.Comments)
            {
                <tr>
                    <td>@comment.User.Username</td>
                    <td>
                        <div>@comment.Content</div>
                        <small class="text-muted">@comment.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                    </td>
                    <td>@(comment.Upvotes - comment.Downvotes)</td>
                    <td><button @onclick="() => Upvote(comment.Id)">Upvote</button></td>
                    <td><button @onclick="() => Downvote(comment.Id)">Downvote</button></td>
                </tr>
            }
        </table>
    </div>


    <div class="contents">
        <CreateComment PostId=@PostId OnCommentCreated="RefreshPost"></CreateComment>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }

    @inject NavigationManager NavMan;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Post = await apiService.GetPost(PostId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading post: {ex.Message}");
        }
    }
    private async void Upvote(int id)
    {
        try
        {
            await apiService.UpvoteComment(id);
            await RefreshPost();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error upvoting comment: {ex.Message}");
        }
    }

    private async void Downvote(int id)
    {
        try
        {
            await apiService.DownvoteComment(id);
            await RefreshPost();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downvoting comment: {ex.Message}");
        }
    }

    private async Task RefreshPost()
    {
        Post = await apiService.GetPost(PostId);
        StateHasChanged();
    }

    private bool IsUrl(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return false;
            
        // Check if the text is a URL (similar to the validation in CreatePost.razor)
        string pattern = @"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$";
        return Regex.IsMatch(text, pattern);
    }

    private string EnsureHttpPrefix(string url)
    {
        // Make sure the URL has http:// or https:// prefix
        if (!url.StartsWith("http://") && !url.StartsWith("https://"))
        {
            return "https://" + url;
        }
        return url;
    }
}
