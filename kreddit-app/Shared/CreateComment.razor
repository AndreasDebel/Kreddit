@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService
@inject NavigationManager NavigationManager

<div>
    <br/>
    <h3>Write a comment</h3>
    
    <div class="d-flex align-items-center">
        <div class="form-group me-2" style="width: 30%;">
            <select id="userSelect" class="form-control" @bind="selectedUserId">
                <option value="">Comment as...</option>
                @if (users != null)
                {
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.Username</option>
                    }
                }
            </select>
        </div>
        
        <div class="form-group" style="width: 60%;">
            <input placeholder="Write your comment here..." type="input" id="content" class="form-control" @bind-value="content"/>
        </div>
        
        <div class="ms-2">
            <button id="createPostButton" type="button" class="btn btn-primary" 
                    @onclick="CreateNewComment" disabled="@(string.IsNullOrEmpty(selectedUserId.ToString()) || selectedUserId == 0)">
                Post
            </button>
        </div>
    </div>
</div>

@code {
    // PostId is passed in from the parent component
    [Parameter]
    public int PostId { get; set; }

    // Event callback to notify parent when comment is created
    [Parameter]
    public EventCallback OnCommentCreated { get; set; }

    private string? content;
    private int selectedUserId;
    private User[]? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load users when component initializes
            users = await apiService.GetUsers();
            
            // Debug output
            Console.WriteLine($"Loaded {users?.Length ?? 0} users for dropdown");
            if (users != null)
            {
                foreach (var user in users)
                {
                    Console.WriteLine($"User: {user.Id} - {user.Username}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task CreateNewComment()
    {
        if (string.IsNullOrEmpty(content) || selectedUserId == 0)
        {
            return;
        }
        
        await apiService.CreateComment(content, PostId, selectedUserId);

        // Clear the input field
        content = null;
        
        // Notify parent component that a comment was created
        await OnCommentCreated.InvokeAsync();
    }
}
